{"version":3,"sources":["utils/isEmpty.js","utils/currency.js","utils/updateObject.js","store/reducers/errReducer.js","store/reducers/authReducer.js","store/reducers/accountReducer.js","store/reducers/index.js","store/actions/actionTypes.js","store/store.js","utils/setAuthToken.js","utils/decodeToken.js","store/actions/authActions.js","components/HigherOrder/Card.js","components/Alert/Alert.js","components/Inputs/InputGroup.js","store/actions/accountActions.js","components/Forms/Deposit.js","components/Forms/Withdraw.js","pages/Account/Account.js","pages/Landing/Landing.js","components/Forms/Login.js","components/Forms/Register.js","pages/Authenticate/Authenticate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","value","undefined","Object","keys","length","trim","formatCurrency","currency","Number","replace","numToCurrency","x","commas","toFixed","oldObject","updatedProperties","getErrors","state","action","updateObject","payload","setCurrentUser","auth","isAuth","isEmpty","user","setTransactionDetails","combineReducers","err","type","acc","initialState","StoreContext","createContext","StateProvider","children","useReducer","rootReducer","dispatch","Provider","setAuthToken","token","axios","defaults","headers","common","decodeToken","localStorage","setItem","jwt_decode","register","userData","a","post","response","data","login","res","decoded","withRouter","props","logoutLink","useContext","history","location","pathname","to","onClick","removeItem","logout","className","Alert","content","close","entries","map","entry","i","key","InputGroup","groupClass","name","id","inputClass","placeholder","minLength","required","onChange","onFocus","label","htmlFor","depositLoad","depositData","transDetails","withdrawLoad","deposit","submitted","submitting","submitSuccess","disableSubmitButton","reducer","onDepositSubmit","e","globalState","globalDispatch","preventDefault","date","Date","transaction","time","toISOString","amount","Deposit","globalStateContext","useEffect","values","redirect","onSubmit","target","disabled","withdraw","onWithdrawSubmit","Withdraw","accountTotal","useState","accAction","setAccAction","account","total","push","loginEmail","loginPassword","onLoginSubmit","newUser","Login","registerEmail","registerName","registerPassword","registerPasswordConfirm","newRegister","onRegisterSubmit","Register","page","setPage","match","params","App","jwtToken","jwtDecode","currentTime","now","exp","window","href","exact","path","component","Landing","Account","Authenticate","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6eaf24ea.chunk.js","sourcesContent":["const isEmpty = value =>\r\n  value === undefined ||\r\n  value === null ||\r\n  (typeof value === 'object' && Object.keys(value).length === 0) ||\r\n  (typeof value === 'string' && value.trim().length === 0);\r\n\r\nmodule.exports = isEmpty;\r\n","// Utilities concerning currency calculations\r\n\r\n// Formats currency in string format \"$##.##\" to number\r\nexports.formatCurrency = (currency) => {\r\n  return Number(currency.replace(/[^0-9.-]+/g, \"\"));\r\n};\r\n\r\n// Formats number to $#,###.## format\r\nexports.numToCurrency = (x) => {\r\n  const fixed = x.toFixed(2);\r\n  const commas = fixed.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  return `$${commas}`;\r\n};\r\n","// Updates object key value pairs\r\nexport default (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  }\r\n}","// Action Types\r\nimport * as actionTypes from \"../actions/actionTypes\";\r\n\r\n// Utilities\r\nimport updateObject from \"../../utils/updateObject\";\r\n\r\n// Any errors caught will be in state\r\nconst getErrors = (state, action) => {\r\n  return updateObject(state, action.payload);\r\n};\r\n\r\nexport default function (state = {}, action) {\r\n  switch (action.type) {\r\n    case actionTypes.GET_ERRORS:\r\n      return getErrors(state, action);\r\n    case actionTypes.CLEAR_ERRORS:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// Action Types\r\nimport * as actionTypes from \"../actions/actionTypes\";\r\n\r\n// Utilities\r\nimport isEmpty from \"../../utils/isEmpty\";\r\nimport updateObject from \"../../utils/updateObject\";\r\n\r\n// Shows if user is authenticated and assigns data from JWT\r\nconst setCurrentUser = (state, action) => {\r\n  return updateObject(state.auth, {\r\n    isAuth: !isEmpty(action.payload),\r\n    user: action.payload,\r\n  });\r\n};\r\n\r\n// Create the reducer\r\nexport default function (state = {}, action) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_CURRENT_USER:\r\n      return setCurrentUser(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// Action Types\r\nimport * as actionTypes from \"../actions/actionTypes\";\r\n\r\n// Utilities\r\nimport updateObject from \"../../utils/updateObject\";\r\n\r\nconst setTransactionDetails = (state, action) => {\r\n  return updateObject(state, action.payload);\r\n};\r\n\r\n// Create the reducer\r\nexport default function (state = {}, action) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_TRANS_DETAILS:\r\n      return setTransactionDetails(state, action);\r\n    case actionTypes.CLEAR_TRANS_DETAILS:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// Redux\r\nimport { combineReducers } from \"redux\";\r\n\r\n// Reducers\r\nimport errReducer from \"./errReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport accountReducer from './accountReducer';\r\n\r\nexport default combineReducers({\r\n  err: errReducer,\r\n  auth: authReducer,\r\n  acc: accountReducer\r\n});\r\n","// Authentication\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\n// Error handling\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\r\n\r\n// Transaction\r\nexport const SET_TRANS_DETAILS = \"SET_TRANS_DETAILS\";\r\nexport const CLEAR_TRANS_DETAILS = \"CLEAR_TRANS_DETAILS\";","// React\r\nimport React, { createContext, useReducer } from \"react\";\r\n\r\n// Reducers\r\nimport rootReducer from \"./reducers\";\r\n\r\n// State\r\nconst initialState = {\r\n  acc: {},\r\n  err: {},\r\n  auth: {\r\n    user: null,\r\n    isAuth: false,\r\n  },\r\n};\r\n\r\n// Create the context\r\nconst StoreContext = createContext();\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(rootReducer, initialState);\r\n\r\n  return (\r\n    <StoreContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </StoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport { StoreContext, StateProvider };\r\n","// Utilities\r\nimport axios from 'axios';\r\n\r\n// Sets authorization headers\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply to every request\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nexport default setAuthToken;","// Utilities\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from './setAuthToken';\r\n\r\n// Decodes JWT\r\nconst decodeToken = (token) => {\r\n  // Set token to ls\r\n  localStorage.setItem(\"jwtToken\", token);\r\n  // Set token to Auth header\r\n  setAuthToken(token);\r\n  // Return decoded token to get user data\r\n  return jwt_decode(token);\r\n};\r\n\r\nexport default decodeToken;","// Action Types\r\nimport * as actionTypes from \"./actionTypes\";\r\n\r\n// Utilities\r\nimport axios from \"axios\";\r\nimport decodeToken from \"../../utils/decodeToken\";\r\nimport setAuthToken from \"../../utils/setAuthToken\";\r\n\r\n/////////////////\r\n// Public Routes\r\n\r\n// @route   POST api/v1/users/register\r\n// @desc    Register user\r\n// @access  Public\r\nexport const register = async (userData, dispatch) => {\r\n  try {\r\n    await axios.post(\"/api/v1/users/register\", userData);\r\n  } catch (err) {\r\n    dispatch({ type: actionTypes.GET_ERRORS, payload: err.response.data });\r\n  }\r\n};\r\n\r\n// @route   POST api/v1/users/login\r\n// @desc    Login User / JWT Response => Sets LS and auth headers\r\n// @access  Public\r\nexport const login = async (userData, dispatch) => {\r\n  try {\r\n    const res = await axios.post(\r\n      \"/api/v1/users/login\",\r\n      userData\r\n    );\r\n    const decoded = decodeToken(res.data.token);\r\n    dispatch({ type: actionTypes.SET_CURRENT_USER, payload: decoded });\r\n  } catch (err) {\r\n    dispatch({ type: actionTypes.GET_ERRORS, payload: err.response.data });\r\n  }\r\n};\r\n\r\n// Logout user => Removes JWT from LS and auth headers\r\nexport const logout = (dispatch) => {\r\n  localStorage.removeItem(\"jwtToken\");\r\n  setAuthToken(false);\r\n  dispatch({ type: actionTypes.SET_CURRENT_USER, payload: {} });\r\n};\r\n","// React\r\nimport React, { useContext } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Actions\r\nimport { logout } from \"../../store/actions/authActions\";\r\n\r\nconst Card = (props) => {\r\n  const globalStoreContext = useContext(StoreContext);\r\n  const { dispatch } = globalStoreContext;\r\n\r\n  let logoutLink;\r\n  if (props.history.location.pathname === \"/account\") {\r\n    logoutLink = (\r\n      <h2\r\n        to=\"/\"\r\n        onClick={() => logout(dispatch)}\r\n        className=\"card__link heading-secondary heading-active\"\r\n      >\r\n        Logout\r\n      </h2>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"card ta-center\">\r\n      {logoutLink}\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Card);\r\n","// React\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Alert that appears at the type of the page\r\nconst Alert = (props) => {\r\n  let content, close;\r\n  if (props.entries) {\r\n    const entries = props.entries.map((entry, i) => <li key={i}>{entry}</li>);\r\n    content = <ul>{entries}</ul>;\r\n  }\r\n\r\n  if (props.close) {\r\n    close = <a className='alert__close' onClick={props.close}>Dismiss</a>;\r\n  }\r\n\r\n  return (\r\n    <div className={`alert alert--${props.type}`}>\r\n      {props.entries ? content : props.children}\r\n      {close}\r\n    </div>\r\n  );\r\n};\r\n\r\nAlert.propTypes = {\r\n  entries: PropTypes.array,\r\n  type: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Alert;\r\n","// React\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Form input group\r\nconst InputGroup = (props) => {\r\n  return (\r\n    <div className={`form__group ${props.groupClass}`}>\r\n      <input\r\n        type={props.type}\r\n        name={props.name}\r\n        id={props.id}\r\n        className={`form__input ${props.inputClass}`}\r\n        placeholder={props.placeholder}\r\n        minLength={props.minLength}\r\n        value={props.value}\r\n        required={props.required}\r\n        onChange={props.onChange}\r\n        onFocus={props.onFocus}\r\n      />\r\n      {props.label ? (\r\n        <label\r\n          htmlFor={props.htmlFor}\r\n          className={!props.err ? \"form__label\" : \"form__label fc-danger\"}\r\n        >\r\n          {!props.err ? props.label : props.err}\r\n        </label>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nInputGroup.propTypes = {\r\n  groupClass: PropTypes.string,\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string,\r\n  inputClass: PropTypes.string,\r\n  placeholder: PropTypes.string.isRequired,\r\n  minLength: PropTypes.string,\r\n  required: PropTypes.bool,\r\n  onChange: PropTypes.func.isRequired,\r\n  htmlFor: PropTypes.string,\r\n  label: PropTypes.string,\r\n  err: PropTypes.string,\r\n};\r\n\r\nexport default InputGroup;\r\n","// Action Types\r\nimport * as actionTypes from \"./actionTypes\";\r\n\r\n// Utilities\r\nimport axios from \"axios\";\r\nimport decodeToken from \"../../utils/decodeToken\";\r\n\r\n////////////////////\r\n// Protected Routes\r\n\r\n// @route   Post api/v1/transactions/deposit\r\n// @desc    Deposits a requested amount\r\n// @access  Private\r\nexport const depositLoad = async (depositData, dispatch) => {\r\n  try {\r\n    const res = await axios.post(\r\n      \"/api/v1/transactions/deposit\",\r\n      depositData\r\n    );\r\n    const decoded = decodeToken(res.data.token);\r\n    dispatch({ type: actionTypes.SET_CURRENT_USER, payload: decoded });\r\n    dispatch({ type: actionTypes.SET_TRANS_DETAILS, payload: res.data.transDetails });\r\n  } catch (err) {\r\n    dispatch({ type: actionTypes.GET_ERRORS, payload: err.response.data });\r\n  }\r\n};\r\n\r\n// @route   Post api/v1/transactions/withdraw\r\n// @desc    Withdraws a requested amount\r\n// @access  Private\r\nexport const withdrawLoad = async (depositData, dispatch) => {\r\n  try {\r\n    const res = await axios.post(\r\n      \"/api/v1/transactions/withdraw\",\r\n      depositData\r\n    );\r\n    const decoded = decodeToken(res.data.token);\r\n    dispatch({ type: actionTypes.SET_CURRENT_USER, payload: decoded });\r\n    dispatch({ type: actionTypes.SET_TRANS_DETAILS, payload: res.data.transDetails });\r\n  } catch (err) {\r\n    dispatch({ type: actionTypes.GET_ERRORS, payload: err.response.data });\r\n  }\r\n};","// React\r\nimport React, { useReducer, useContext, useEffect } from \"react\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Components\r\nimport Alert from \"../Alert/Alert\";\r\nimport InputGroup from \"../Inputs/InputGroup\";\r\n\r\n// Actions\r\nimport { depositLoad } from \"../../store/actions/accountActions\";\r\n\r\n// Action Types\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\n\r\n// Utilities\r\nimport updateObject from \"../../utils/updateObject\";\r\n\r\nconst initialState = {\r\n  deposit: \"\",\r\n  submitted: false,\r\n  submitting: false,\r\n  submitSuccess: false,\r\n  disableSubmitButton: false,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"setDeposit\":\r\n      return updateObject(state, { deposit: action.payload });\r\n    case \"isSubmitting\":\r\n      return updateObject(state, {\r\n        submitted: false,\r\n        submitting: true,\r\n        submitSuccess: false,\r\n        disableSubmitButton: true,\r\n      });\r\n    case \"submitted\":\r\n      return updateObject(state, {\r\n        submitted: true,\r\n        submitting: false,\r\n        disableSubmitButton: false,\r\n      });\r\n    case \"submitSuccess\":\r\n      return updateObject(state, {\r\n        deposit: \"\",\r\n        submitSuccess: true,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Make a post request for deposit transaction\r\nconst onDepositSubmit = async (\r\n  e,\r\n  state,\r\n  globalState,\r\n  dispatch,\r\n  globalDispatch\r\n) => {\r\n  e.preventDefault();\r\n  dispatch({ type: \"isSubmitting\" });\r\n  if (Object.keys(globalState.err).length) {\r\n    globalDispatch({ type: actionTypes.CLEAR_ERRORS });\r\n  }\r\n\r\n  const date = new Date();\r\n\r\n  // Deposit data to post\r\n  const transaction = {\r\n    time: date.toISOString(),\r\n    amount: Number(state.deposit),\r\n  };\r\n\r\n  // POST request\r\n  await depositLoad(transaction, globalDispatch);\r\n\r\n  dispatch({ type: \"submitted\" });\r\n};\r\n\r\nconst Deposit = (props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const globalStateContext = useContext(StoreContext);\r\n  const globalState = globalStateContext.state;\r\n  const globalDispatch = globalStateContext.dispatch;\r\n\r\n  // Alert user if registration was successful\r\n  useEffect(() => {\r\n    if (state.submitted && !Object.keys(globalState.err).length) {\r\n      dispatch({ type: \"submitSuccess\" });\r\n    }\r\n  }, [state.submitted, globalState.err]);\r\n\r\n  return (\r\n    <>\r\n      {Object.values(globalState.acc).length ? (\r\n        <Alert\r\n          type=\"success\"\r\n          entries={Object.values(globalState.acc)}\r\n          close={() =>\r\n            globalDispatch({ type: actionTypes.CLEAR_TRANS_DETAILS })\r\n          }\r\n        />\r\n      ) : null}\r\n      {Object.values(globalState.err).length ? (\r\n        <Alert\r\n          type=\"error\"\r\n          entries={Object.values(globalState.err)}\r\n          close={() => globalDispatch({ type: actionTypes.CLEAR_ERRORS })}\r\n        />\r\n      ) : null}\r\n      <a className=\"heading-tertiary ma-bt-md\" onClick={props.redirect}>\r\n        Back to account options\r\n      </a>\r\n      <form\r\n        className=\"form\"\r\n        onSubmit={(e) =>\r\n          onDepositSubmit(e, state, globalState, dispatch, globalDispatch)\r\n        }\r\n      >\r\n        <h2 className=\"heading-secondary ma-bt-sm\">\r\n          Choose an amount to deposit\r\n        </h2>\r\n        <InputGroup\r\n          type=\"number\"\r\n          name=\"deposit\"\r\n          id=\"deposit\"\r\n          placeholder=\"Deposit amount\"\r\n          value={state.deposit}\r\n          required={true}\r\n          onChange={(e) =>\r\n            dispatch({ type: \"setDeposit\", payload: e.target.value })\r\n          }\r\n          htmlFor=\"deposit\"\r\n          label=\"Deposit amount\"\r\n          err={globalState.err.amount}\r\n        />\r\n        <div className=\"form__group\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn--primary\"\r\n            disabled={state.disableSubmitButton}\r\n          >\r\n            {!state.submitting ? \"Submit deposit\" : \"Submitting deposit...\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Deposit;\r\n","// React\r\nimport React, { useReducer, useContext, useEffect } from \"react\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Components\r\nimport Alert from \"../Alert/Alert\";\r\nimport InputGroup from \"../Inputs/InputGroup\";\r\n\r\n// Actions\r\nimport { withdrawLoad } from \"../../store/actions/accountActions\";\r\n\r\n// Action Types\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\n\r\n// Utilities\r\nimport updateObject from \"../../utils/updateObject\";\r\n\r\nconst initialState = {\r\n  withdraw: \"\",\r\n  submitted: false,\r\n  submitting: false,\r\n  submitSuccess: false,\r\n  disableSubmitButton: false,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"setWithdrawal\":\r\n      return updateObject(state, { withdraw: action.payload });\r\n    case \"isSubmitting\":\r\n      return updateObject(state, {\r\n        submitted: false,\r\n        submitting: true,\r\n        submitSuccess: false,\r\n        disableSubmitButton: true,\r\n      });\r\n    case \"submitted\":\r\n      return updateObject(state, {\r\n        submitted: true,\r\n        submitting: false,\r\n        disableSubmitButton: false,\r\n      });\r\n    case \"submitSuccess\":\r\n      return updateObject(state, {\r\n        withdraw: \"\",\r\n        submitSuccess: true,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Make a post request for withdraw transaction\r\nconst onWithdrawSubmit = async (\r\n  e,\r\n  state,\r\n  globalState,\r\n  dispatch,\r\n  globalDispatch\r\n) => {\r\n  e.preventDefault();\r\n  dispatch({ type: \"isSubmitting\" });\r\n  if (Object.keys(globalState.err).length) {\r\n    globalDispatch({ type: actionTypes.CLEAR_ERRORS });\r\n  }\r\n\r\n  const date = new Date();\r\n\r\n  // Withdraw data to post\r\n  const transaction = {\r\n    time: date.toISOString(),\r\n    amount: Number(state.withdraw),\r\n  };\r\n\r\n  // POST request\r\n  await withdrawLoad(transaction, globalDispatch);\r\n\r\n  dispatch({ type: \"submitted\" });\r\n};\r\n\r\nconst Withdraw = (props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const globalStateContext = useContext(StoreContext);\r\n  const globalState = globalStateContext.state;\r\n  const globalDispatch = globalStateContext.dispatch;\r\n\r\n  // Alert user if registration was successful\r\n  useEffect(() => {\r\n    if (state.submitted && !Object.keys(globalState.err).length) {\r\n      dispatch({ type: \"submitSuccess\" });\r\n    }\r\n\r\n  }, [state.submitted, globalState.err]);\r\n\r\n  return (\r\n    <>\r\n      {Object.values(globalState.acc).length ? (\r\n        <Alert\r\n          type=\"success\"\r\n          entries={Object.values(globalState.acc)}\r\n          close={() =>\r\n            globalDispatch({ type: actionTypes.CLEAR_TRANS_DETAILS })\r\n          }\r\n        />\r\n      ) : null}\r\n      {Object.values(globalState.err).length ? (\r\n        <Alert\r\n          type=\"error\"\r\n          entries={Object.values(globalState.err)}\r\n          close={() => globalDispatch({ type: actionTypes.CLEAR_ERRORS })}\r\n        />\r\n      ) : null}\r\n      <a className=\"heading-tertiary ma-bt-md\" onClick={props.redirect}>\r\n        Back to account options\r\n      </a>\r\n      <form\r\n        className=\"form\"\r\n        onSubmit={(e) =>\r\n          onWithdrawSubmit(e, state, globalState, dispatch, globalDispatch)\r\n        }\r\n      >\r\n        <h2 className=\"heading-secondary ma-bt-sm\">\r\n          Choose an amount to withdraw\r\n        </h2>\r\n        <InputGroup\r\n          type=\"number\"\r\n          name=\"withdraw\"\r\n          id=\"withdraw\"\r\n          placeholder=\"Withdraw amount\"\r\n          label=\"Withdraw amount\"\r\n          value={state.withdraw}\r\n          required={true}\r\n          onChange={(e) =>\r\n            dispatch({ type: \"setWithdrawal\", payload: e.target.value })\r\n          }\r\n          htmlFor=\"withdraw\"\r\n          err={globalState.err.amount}\r\n        />\r\n        <div className=\"form__group\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn--primary\"\r\n            disabled={state.disableSubmitButton}\r\n          >\r\n            {!state.submitting\r\n              ? \"Submit withdrawal\"\r\n              : \"Submitting withdrawal...\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Withdraw;\r\n","// React\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Utils\r\nimport { numToCurrency } from \"../../utils/currency\";\r\n\r\n// Components\r\nimport Card from \"../../components/HigherOrder/Card\";\r\nimport Deposit from \"../../components/Forms/Deposit\";\r\nimport Withdraw from \"../../components/Forms/Withdraw\";\r\n\r\nconst Account = (props) => {\r\n  const [accAction, setAccAction] = useState(\"\");\r\n  const globalStateContext = useContext(StoreContext);\r\n  const { isAuth, user } = globalStateContext.state.auth;\r\n\r\n  let content;\r\n  let accountTotal;\r\n  if (user && isAuth) accountTotal = numToCurrency(user.account.total);\r\n\r\n  useEffect(() => {\r\n    // If not authenticated, push the user to their account\r\n    if (!isAuth) props.history.push(\"/\");\r\n  }, [isAuth]);\r\n\r\n  if (!accAction) {\r\n    content = (\r\n      <ul className=\"account__links\">\r\n        <li className=\"account__link text-primary heading-active fw-medium\" onClick={() => setAccAction(\"deposit\")}>\r\n          Make a deposit\r\n        </li>\r\n        <li className=\"account__link text-primary heading-active fw-medium\" onClick={() => setAccAction(\"withdraw\")}>\r\n          Make a withdrawal\r\n        </li>\r\n      </ul>\r\n    );\r\n  } else if (accAction === \"deposit\") {\r\n    content = <Deposit redirect={() => setAccAction(\"\")} />;\r\n  } else if (accAction === \"withdraw\") {\r\n    content = <Withdraw redirect={() => setAccAction(\"\")} />;\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <header className=\"ma-bt-xlg\">\r\n        <h1 className=\"heading-primary heading-primary--spans\">\r\n          <span>Account Total</span>\r\n          <span>{accountTotal}</span>\r\n        </h1>\r\n      </header>\r\n      <ul className=\"account__content\">{content}</ul>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default withRouter(Account);\r\n","// React\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Components\r\nimport Card from \"../../components/HigherOrder/Card\";\r\n\r\nconst Landing = (props) => {\r\n  const globalStateContext = useContext(StoreContext);\r\n  const { state } = globalStateContext;\r\n\r\n  useEffect(() => {\r\n    // If authenticated, push the user to their account\r\n    if (state.auth.isAuth) props.history.push(\"/account\");\r\n  }, [state.auth.isAuth]);\r\n\r\n  return (\r\n    <Card>\r\n      <header className=\"ma-bt-xlg\">\r\n        <h1 className=\"heading-primary ma-bt-sm\">\r\n          KOHO Assignment Application\r\n        </h1>\r\n        <h2 className=\"heading-secondary\">\r\n          Create an account, make deposits, and withdrawals\r\n        </h2>\r\n      </header>\r\n      <main>\r\n        <h3 className=\"heading-secondary ma-bt-md\">\r\n          Login or register to get started\r\n        </h3>\r\n        <div className=\"landing__authenticate-links\">\r\n          <Link to=\"/authenticate/login\" className=\"heading-tertiary\">\r\n            Login\r\n          </Link>\r\n          <Link to=\"/authenticate/register\" className=\"heading-tertiary\">\r\n            Register\r\n          </Link>\r\n        </div>\r\n      </main>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default withRouter(Landing);\r\n","// React\r\nimport React, { useReducer, useContext, useEffect } from \"react\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Components\r\nimport InputGroup from \"../Inputs/InputGroup\";\r\n\r\n// Actions\r\nimport { login } from \"../../store/actions/authActions\";\r\n\r\n// Action Types\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\n\r\n// Utilities\r\nimport updateObject from \"../../utils/updateObject\";\r\n\r\nconst initialState = {\r\n  loginEmail: \"\",\r\n  loginPassword: \"\",\r\n  submitting: false,\r\n  submitted: false,\r\n  disableSubmitButton: false,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"setEmail\":\r\n      return updateObject(state, { loginEmail: action.payload });\r\n    case \"setPassword\":\r\n      return updateObject(state, { loginPassword: action.payload });\r\n    case \"isSubmitting\":\r\n      return updateObject(state, {\r\n        submitting: true,\r\n        disableSubmitButton: true,\r\n      });\r\n    case \"submitted\":\r\n      return updateObject(state, {\r\n        submitting: false,\r\n        disableSubmitButton: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Make a post request to login a user\r\nconst onLoginSubmit = async (\r\n  e,\r\n  state,\r\n  globalState,\r\n  dispatch,\r\n  globalDispatch\r\n) => {\r\n  e.preventDefault();\r\n  dispatch({ type: \"isSubmitting\" });\r\n  if (Object.keys(globalState.err).length) {\r\n    globalDispatch({ type: actionTypes.CLEAR_ERRORS });\r\n  }\r\n\r\n  // User data to post\r\n  const newUser = {\r\n    loginEmail: state.loginEmail,\r\n    loginPassword: state.loginPassword,\r\n  };\r\n\r\n  // Login user and get JWT\r\n  await login(newUser, globalDispatch);\r\n};\r\n\r\nconst Login = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const globalStateContext = useContext(StoreContext);\r\n  const globalState = globalStateContext.state;\r\n  const globalDispatch = globalStateContext.dispatch;\r\n\r\n  // Revert submitting if there are errors\r\n  useEffect(() => {\r\n    if (state.submitting && Object.keys(globalState.err).length) {\r\n      dispatch({ type: \"submitted\" });\r\n    }\r\n  }, [state.submitting, globalState.err]);\r\n\r\n  return (\r\n    <form\r\n      className=\"form\"\r\n      onSubmit={(e) =>\r\n        onLoginSubmit(e, state, globalState, dispatch, globalDispatch)\r\n      }\r\n    >\r\n      <h2 className=\"heading-primary ma-bt-sm\">Login</h2>\r\n      <InputGroup\r\n        type=\"email\"\r\n        name=\"loginEmail\"\r\n        id=\"email\"\r\n        placeholder=\"Email address\"\r\n        value={state.loginEmail}\r\n        required={true}\r\n        onChange={(e) =>\r\n          dispatch({ type: \"setEmail\", payload: e.target.value })\r\n        }\r\n        htmlFor=\"loginEmail\"\r\n        label=\"Email address\"\r\n        err={globalState.err.loginEmail}\r\n      />\r\n      <InputGroup\r\n        type=\"password\"\r\n        name=\"loginPassword\"\r\n        id=\"loginPassword\"\r\n        placeholder=\"Password\"\r\n        value={state.loginPassword}\r\n        required={true}\r\n        onChange={(e) =>\r\n          dispatch({ type: \"setPassword\", payload: e.target.value })\r\n        }\r\n        htmlFor=\"loginPassword\"\r\n        label=\"Password\"\r\n        err={globalState.err.loginPassword}\r\n      />\r\n      <div className=\"form__group ma-bt-md\">\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn--primary\"\r\n          disabled={state.disableSubmitButton}\r\n        >\r\n          {!state.submitting ? \"Login\" : \"Logging In...\"}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// React\r\nimport React, { useReducer, useContext, useEffect } from \"react\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Components\r\nimport InputGroup from \"../Inputs/InputGroup\";\r\n\r\n// Actions\r\nimport { register } from \"../../store/actions/authActions\";\r\n\r\n// Action Types\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\n\r\n// Utilities\r\nimport updateObject from \"../../utils/updateObject\";\r\n\r\nconst initialState = {\r\n  registerEmail: \"\",\r\n  registerName: \"\",\r\n  registerPassword: \"\",\r\n  registerPasswordConfirm: \"\",\r\n  submitted: false,\r\n  submitting: false,\r\n  disableSubmitButton: false,\r\n  newRegister: false,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"setEmail\":\r\n      return updateObject(state, { registerEmail: action.payload });\r\n    case \"setName\":\r\n      return updateObject(state, { registerName: action.payload });\r\n    case \"setPassword\":\r\n      return updateObject(state, { registerPassword: action.payload });\r\n    case \"setPasswordConfirm\":\r\n      return updateObject(state, { registerPasswordConfirm: action.payload });\r\n    case \"isSubmitting\":\r\n      return updateObject(state, {\r\n        submitted: false,\r\n        submitting: true,\r\n        disableSubmitButton: true,\r\n      });\r\n    case \"submitted\":\r\n      return updateObject(state, {\r\n        submitted: true,\r\n        submitting: false,\r\n        disableSubmitButton: false,\r\n      });\r\n    case \"submitSuccess\":\r\n      return updateObject(state, {\r\n        registerEmail: \"\",\r\n        registerName: \"\",\r\n        registerPassword: \"\",\r\n        registerPasswordConfirm: \"\",\r\n        newRegister: true,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Make a post request to register a new user\r\nconst onRegisterSubmit = async (\r\n  e,\r\n  state,\r\n  globalState,\r\n  dispatch,\r\n  globalDispatch\r\n) => {\r\n  e.preventDefault();\r\n  dispatch({ type: \"isSubmitting\" });\r\n  if (Object.keys(globalState.err).length) {\r\n    globalDispatch({ type: actionTypes.CLEAR_ERRORS });\r\n  }\r\n\r\n  // User data to post\r\n  const newUser = {\r\n    registerEmail: state.registerEmail,\r\n    registerName: state.registerName,\r\n    registerPassword: state.registerPassword,\r\n    registerPasswordConfirm: state.registerPasswordConfirm,\r\n  };\r\n\r\n  // Register new user in DB\r\n  await register(newUser, globalDispatch);\r\n\r\n  dispatch({ type: \"submitted\" });\r\n};\r\n\r\nconst Register = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const globalStateContext = useContext(StoreContext);\r\n  const globalState = globalStateContext.state;\r\n  const globalDispatch = globalStateContext.dispatch;\r\n\r\n  // Alert user if registration was successful\r\n  useEffect(() => {\r\n    if (state.submitted && !Object.keys(globalState.err).length) {\r\n      dispatch({ type: \"submitSuccess\" });\r\n    }\r\n  }, [state.submitted, globalState.err]);\r\n\r\n  return (\r\n    <form\r\n      className=\"form\"\r\n      onSubmit={(e) =>\r\n        onRegisterSubmit(e, state, globalState, dispatch, globalDispatch)\r\n      }\r\n    >\r\n      <h2 className=\"heading-primary ma-bt-sm\">\r\n        {!state.newRegister ? \"Register\" : \"Register Successful!\"}\r\n      </h2>\r\n      <InputGroup\r\n        type=\"email\"\r\n        name=\"registerEmail\"\r\n        id=\"registerEmail\"\r\n        placeholder=\"Email address\"\r\n        value={state.registerEmail}\r\n        required={true}\r\n        onChange={(e) =>\r\n          dispatch({ type: \"setEmail\", payload: e.target.value })\r\n        }\r\n        htmlFor=\"registerEmail\"\r\n        label=\"Email address\"\r\n        err={globalState.err.registerEmail}\r\n      />\r\n      <InputGroup\r\n        type=\"text\"\r\n        name=\"registerName\"\r\n        id=\"registerName\"\r\n        placeholder=\"Full name\"\r\n        value={state.registerName}\r\n        required={true}\r\n        onChange={(e) => dispatch({ type: \"setName\", payload: e.target.value })}\r\n        htmlFor=\"registerName\"\r\n        label=\"Full name\"\r\n        err={globalState.err.registerName}\r\n      />\r\n      <InputGroup\r\n        type=\"password\"\r\n        name=\"registerPassword\"\r\n        id=\"registerPassword\"\r\n        placeholder=\"Password\"\r\n        value={state.registerPassword}\r\n        required={true}\r\n        onChange={(e) =>\r\n          dispatch({ type: \"setPassword\", payload: e.target.value })\r\n        }\r\n        htmlFor=\"registerPassword\"\r\n        label=\"Password\"\r\n        err={globalState.err.registerPassword}\r\n      />\r\n      <InputGroup\r\n        type=\"password\"\r\n        name=\"registerPasswordConfirm\"\r\n        id=\"registerPasswordConfirm\"\r\n        placeholder=\"Confirm Password\"\r\n        value={state.registerPasswordConfirm}\r\n        required={true}\r\n        onChange={(e) =>\r\n          dispatch({ type: \"setPasswordConfirm\", payload: e.target.value })\r\n        }\r\n        htmlFor=\"registerPasswordConfirm\"\r\n        label=\"Confirm Password\"\r\n        err={globalState.err.registerPasswordConfirm}\r\n      />\r\n      <div className=\"form__group ma-bt-md\">\r\n        {!state.newRegister ? (\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn--primary\"\r\n            disabled={state.disableSubmitButton}\r\n          >\r\n            {!state.submitting ? \"Register\" : \"Registering...\"}\r\n          </button>\r\n        ) : (\r\n          <p className='heading-secondary'>Thanks for registering! Please log in to get started!</p>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","// React\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { StoreContext } from \"../../store/store\";\r\n\r\n// Components\r\nimport Card from \"../../components/HigherOrder/Card\";\r\nimport Login from \"../../components/Forms/Login\";\r\nimport Register from \"../../components/Forms/Register\";\r\n\r\nconst Authenticate = (props) => {\r\n  const [page, setPage] = useState(\"\");\r\n  const globalStateContext = useContext(StoreContext);\r\n  const { state } = globalStateContext;\r\n\r\n  useEffect(() => {\r\n    // If authenticated, push the user to their account\r\n    if (state.auth.isAuth) props.history.push(\"/account\");\r\n\r\n    // Render the proper authentication form based on url params\r\n    if (props.match.params.type === \"login\") setPage(\"login\");\r\n    else if (props.match.params.type === \"register\") setPage(\"register\");\r\n  }, [props.match.params.type, state.auth.isAuth]);\r\n\r\n  return (\r\n    <Card>\r\n      <>\r\n        {page === \"login\" ? (\r\n          <Login />\r\n        ) : (\r\n          <Register setPage={() => setPage(\"login\")} />\r\n        )}\r\n        {page === \"login\" ? (\r\n          <>\r\n            <h3 className=\"heading-tertiary ma-bt-sm\">Need to register?</h3>\r\n            <Link className=\"text-primary\" to=\"/authenticate/register\">\r\n              Register\r\n            </Link>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h3 className=\"heading-tertiary ma-bt-sm\">Already registered?</h3>\r\n            <Link className=\"text-primary\" to=\"/authenticate/login\">\r\n              Login\r\n            </Link>\r\n          </>\r\n        )}\r\n      </>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default withRouter(Authenticate);\r\n","import React, { useContext, useEffect } from \"react\";\nimport \"./assets/css/style.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n// Global State\nimport { StoreContext } from \"./store/store\";\n\n// Actions\nimport * as actionTypes from \"./store/actions/actionTypes\";\n\n// Pages\nimport Account from \"./pages/Account/Account\";\nimport Landing from \"./pages/Landing/Landing\";\nimport Authenticate from \"./pages/Authenticate/Authenticate\";\n\n// Utilities\nimport jwtDecode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\n\nfunction App() {\n  const globalStateContext = useContext(StoreContext);\n  const { dispatch } = globalStateContext;\n\n  useEffect(() => {\n    // Check for jwt\n    if (localStorage.jwtToken) {\n      // Set authorization headers and user from jwt\n      setAuthToken(localStorage.jwtToken);\n      const decoded = jwtDecode(localStorage.jwtToken);\n\n      // Check for token expiration and logout if expired\n      const currentTime = Date.now() / 1000;\n      if (decoded.exp < currentTime) {\n        dispatch({ type: actionTypes.SET_CURRENT_USER, payload: {} });\n        window.location.href = \"/\";\n      } else {\n        dispatch({ type: actionTypes.SET_CURRENT_USER, payload: decoded });\n      }\n    }\n  }, []);\n\n  return (\n    <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/account\" component={Account} />\n          <Route exact path=\"/authenticate/:type\" component={Authenticate} />\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { StateProvider } from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}